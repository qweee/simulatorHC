#include "utils.h"


Eigen::MatrixXd pinv(const Eigen::MatrixXd& M) {

    return (M.transpose() * M).inverse() * M.transpose();

};

M51 UPnP_polys(const Eigen::Vector4d & q, const M11 & M)
{
	double q0 = q(0), q1 = q(1), q2 = q(2), q3 = q(3);
	M51 result;
	result(0, 0) = 2 * q0*(M(0, 0)*q0*q0 + M(4, 0)*q0*q1 + M(5, 0)*q0*q2 + M(6, 0)*q0*q3 + M(1, 0)*q1*q1 + M(7, 0)*q1*q2 + M(8, 0)*q1*q3 + M(2, 0)*q2*q2 + M(9, 0)*q2*q3 + M(3, 0)*q3*q3 + M(10, 0)) + q1 * (M(0, 4)*q0*q0 + M(4, 4)*q0*q1 + M(5, 4)*q0*q2 + M(6, 4)*q0*q3 + M(1, 4)*q1*q1 + M(7, 4)*q1*q2 + M(8, 4)*q1*q3 + M(2, 4)*q2*q2 + M(9, 4)*q2*q3 + M(3, 4)*q3*q3 + M(10, 4)) + q2 * (M(0, 5)*q0*q0 + M(4, 5)*q0*q1 + M(5, 5)*q0*q2 + M(6, 5)*q0*q3 + M(1, 5)*q1*q1 + M(7, 5)*q1*q2 + M(8, 5)*q1*q3 + M(2, 5)*q2*q2 + M(9, 5)*q2*q3 + M(3, 5)*q3*q3 + M(10, 5)) + q3 * (M(0, 6)*q0*q0 + M(4, 6)*q0*q1 + M(5, 6)*q0*q2 + M(6, 6)*q0*q3 + M(1, 6)*q1*q1 + M(7, 6)*q1*q2 + M(8, 6)*q1*q3 + M(2, 6)*q2*q2 + M(9, 6)*q2*q3 + M(3, 6)*q3*q3 + M(10, 6));
	result(1, 0) = 2 * q1*(M(0, 1)*q0*q0 + M(4, 1)*q0*q1 + M(5, 1)*q0*q2 + M(6, 1)*q0*q3 + M(1, 1)*q1*q1 + M(7, 1)*q1*q2 + M(8, 1)*q1*q3 + M(2, 1)*q2*q2 + M(9, 1)*q2*q3 + M(3, 1)*q3*q3 + M(10, 1)) + q0 * (M(0, 4)*q0*q0 + M(4, 4)*q0*q1 + M(5, 4)*q0*q2 + M(6, 4)*q0*q3 + M(1, 4)*q1*q1 + M(7, 4)*q1*q2 + M(8, 4)*q1*q3 + M(2, 4)*q2*q2 + M(9, 4)*q2*q3 + M(3, 4)*q3*q3 + M(10, 4)) + q2 * (M(0, 7)*q0*q0 + M(4, 7)*q0*q1 + M(5, 7)*q0*q2 + M(6, 7)*q0*q3 + M(1, 7)*q1*q1 + M(7, 7)*q1*q2 + M(8, 7)*q1*q3 + M(2, 7)*q2*q2 + M(9, 7)*q2*q3 + M(3, 7)*q3*q3 + M(10, 7)) + q3 * (M(0, 8)*q0*q0 + M(4, 8)*q0*q1 + M(5, 8)*q0*q2 + M(6, 8)*q0*q3 + M(1, 8)*q1*q1 + M(7, 8)*q1*q2 + M(8, 8)*q1*q3 + M(2, 8)*q2*q2 + M(9, 8)*q2*q3 + M(3, 8)*q3*q3 + M(10, 8));
	result(2, 0) = 2 * q2*(M(0, 2)*q0*q0 + M(4, 2)*q0*q1 + M(5, 2)*q0*q2 + M(6, 2)*q0*q3 + M(1, 2)*q1*q1 + M(7, 2)*q1*q2 + M(8, 2)*q1*q3 + M(2, 2)*q2*q2 + M(9, 2)*q2*q3 + M(3, 2)*q3*q3 + M(10, 2)) + q0 * (M(0, 5)*q0*q0 + M(4, 5)*q0*q1 + M(5, 5)*q0*q2 + M(6, 5)*q0*q3 + M(1, 5)*q1*q1 + M(7, 5)*q1*q2 + M(8, 5)*q1*q3 + M(2, 5)*q2*q2 + M(9, 5)*q2*q3 + M(3, 5)*q3*q3 + M(10, 5)) + q1 * (M(0, 7)*q0*q0 + M(4, 7)*q0*q1 + M(5, 7)*q0*q2 + M(6, 7)*q0*q3 + M(1, 7)*q1*q1 + M(7, 7)*q1*q2 + M(8, 7)*q1*q3 + M(2, 7)*q2*q2 + M(9, 7)*q2*q3 + M(3, 7)*q3*q3 + M(10, 7)) + q3 * (M(0, 9)*q0*q0 + M(4, 9)*q0*q1 + M(5, 9)*q0*q2 + M(6, 9)*q0*q3 + M(1, 9)*q1*q1 + M(7, 9)*q1*q2 + M(8, 9)*q1*q3 + M(2, 9)*q2*q2 + M(9, 9)*q2*q3 + M(3, 9)*q3*q3 + M(10, 9));
	result(3, 0) = 2 * q3*(M(0, 3)*q0*q0 + M(4, 3)*q0*q1 + M(5, 3)*q0*q2 + M(6, 3)*q0*q3 + M(1, 3)*q1*q1 + M(7, 3)*q1*q2 + M(8, 3)*q1*q3 + M(2, 3)*q2*q2 + M(9, 3)*q2*q3 + M(3, 3)*q3*q3 + M(10, 3)) + q0 * (M(0, 6)*q0*q0 + M(4, 6)*q0*q1 + M(5, 6)*q0*q2 + M(6, 6)*q0*q3 + M(1, 6)*q1*q1 + M(7, 6)*q1*q2 + M(8, 6)*q1*q3 + M(2, 6)*q2*q2 + M(9, 6)*q2*q3 + M(3, 6)*q3*q3 + M(10, 6)) + q1 * (M(0, 8)*q0*q0 + M(4, 8)*q0*q1 + M(5, 8)*q0*q2 + M(6, 8)*q0*q3 + M(1, 8)*q1*q1 + M(7, 8)*q1*q2 + M(8, 8)*q1*q3 + M(2, 8)*q2*q2 + M(9, 8)*q2*q3 + M(3, 8)*q3*q3 + M(10, 8)) + q2 * (M(0, 9)*q0*q0 + M(4, 9)*q0*q1 + M(5, 9)*q0*q2 + M(6, 9)*q0*q3 + M(1, 9)*q1*q1 + M(7, 9)*q1*q2 + M(8, 9)*q1*q3 + M(2, 9)*q2*q2 + M(9, 9)*q2*q3 + M(3, 9)*q3*q3 + M(10, 9));
	result(4, 0) = q0*q0 + q1 * q1 + q2 * q2 + q3 * q3 - 1;
	return result;
}

M54 Jacobian(const Eigen::Vector4d & q, const M11 & M)
{
	double q0 = q(0), q1 = q(1), q2 = q(2), q3 = q(3);
	M54 result;

	result(0, 0) = 2 * M(10, 0) + 2 * M(0, 0)*q0*q0 + 2 * M(1, 0)*q1*q1 + 2 * M(2, 0)*q2*q2 + 2 * M(3, 0)*q3*q3 + 2 * q0*(2 * M(0, 0)*q0 + M(4, 0)*q1 + M(5, 0)*q2 + M(6, 0)*q3) + q1 * (2 * M(0, 4)*q0 + M(4, 4)*q1 + M(5, 4)*q2 + M(6, 4)*q3) + q2 * (2 * M(0, 5)*q0 + M(4, 5)*q1 + M(5, 5)*q2 + M(6, 5)*q3) + q3 * (2 * M(0, 6)*q0 + M(4, 6)*q1 + M(5, 6)*q2 + M(6, 6)*q3) + 2 * M(9, 0)*q2*q3 + 2 * M(4, 0)*q0*q1 + 2 * M(5, 0)*q0*q2 + 2 * M(6, 0)*q0*q3 + 2 * M(7, 0)*q1*q2 + 2 * M(8, 0)*q1*q3;
	result(0, 1) = M(10, 4) + M(0, 4)*q0*q0 + M(1, 4)*q1*q1 + M(2, 4)*q2*q2 + M(3, 4)*q3*q3 + 2 * q0*(2 * M(1, 0)*q1 + M(4, 0)*q0 + M(7, 0)*q2 + M(8, 0)*q3) + q1 * (2 * M(1, 4)*q1 + M(4, 4)*q0 + M(7, 4)*q2 + M(8, 4)*q3) + q2 * (2 * M(1, 5)*q1 + M(4, 5)*q0 + M(7, 5)*q2 + M(8, 5)*q3) + q3 * (2 * M(1, 6)*q1 + M(4, 6)*q0 + M(7, 6)*q2 + M(8, 6)*q3) + M(9, 4)*q2*q3 + M(4, 4)*q0*q1 + M(5, 4)*q0*q2 + M(6, 4)*q0*q3 + M(7, 4)*q1*q2 + M(8, 4)*q1*q3;
	result(0, 2) = M(10, 5) + M(0, 5)*q0*q0 + M(1, 5)*q1*q1 + M(2, 5)*q2*q2 + M(3, 5)*q3*q3 + 2 * q0*(M(9, 0)*q3 + 2 * M(2, 0)*q2 + M(5, 0)*q0 + M(7, 0)*q1) + q1 * (M(9, 4)*q3 + 2 * M(2, 4)*q2 + M(5, 4)*q0 + M(7, 4)*q1) + q2 * (M(9, 5)*q3 + 2 * M(2, 5)*q2 + M(5, 5)*q0 + M(7, 5)*q1) + q3 * (M(9, 6)*q3 + 2 * M(2, 6)*q2 + M(5, 6)*q0 + M(7, 6)*q1) + M(9, 5)*q2*q3 + M(4, 5)*q0*q1 + M(5, 5)*q0*q2 + M(6, 5)*q0*q3 + M(7, 5)*q1*q2 + M(8, 5)*q1*q3;
	result(0, 3) = M(10, 6) + M(0, 6)*q0*q0 + M(1, 6)*q1*q1 + M(2, 6)*q2*q2 + M(3, 6)*q3*q3 + 2 * q0*(M(9, 0)*q2 + 2 * M(3, 0)*q3 + M(6, 0)*q0 + M(8, 0)*q1) + q1 * (M(9, 4)*q2 + 2 * M(3, 4)*q3 + M(6, 4)*q0 + M(8, 4)*q1) + q2 * (M(9, 5)*q2 + 2 * M(3, 5)*q3 + M(6, 5)*q0 + M(8, 5)*q1) + q3 * (M(9, 6)*q2 + 2 * M(3, 6)*q3 + M(6, 6)*q0 + M(8, 6)*q1) + M(9, 6)*q2*q3 + M(4, 6)*q0*q1 + M(5, 6)*q0*q2 + M(6, 6)*q0*q3 + M(7, 6)*q1*q2 + M(8, 6)*q1*q3;

	result(1, 0) = M(10, 4) + M(0, 4)*q0*q0 + M(1, 4)*q1*q1 + M(2, 4)*q2*q2 + M(3, 4)*q3*q3 + 2 * q1*(2 * M(0, 1)*q0 + M(4, 1)*q1 + M(5, 1)*q2 + M(6, 1)*q3) + q0 * (2 * M(0, 4)*q0 + M(4, 4)*q1 + M(5, 4)*q2 + M(6, 4)*q3) + q2 * (2 * M(0, 7)*q0 + M(4, 7)*q1 + M(5, 7)*q2 + M(6, 7)*q3) + q3 * (2 * M(0, 8)*q0 + M(4, 8)*q1 + M(5, 8)*q2 + M(6, 8)*q3) + M(9, 4)*q2*q3 + M(4, 4)*q0*q1 + M(5, 4)*q0*q2 + M(6, 4)*q0*q3 + M(7, 4)*q1*q2 + M(8, 4)*q1*q3;
	result(1, 1) = 2 * M(10, 1) + 2 * M(0, 1)*q0*q0 + 2 * M(1, 1)*q1*q1 + 2 * M(2, 1)*q2*q2 + 2 * M(3, 1)*q3*q3 + 2 * q1*(2 * M(1, 1)*q1 + M(4, 1)*q0 + M(7, 1)*q2 + M(8, 1)*q3) + q0 * (2 * M(1, 4)*q1 + M(4, 4)*q0 + M(7, 4)*q2 + M(8, 4)*q3) + q2 * (2 * M(1, 7)*q1 + M(4, 7)*q0 + M(7, 7)*q2 + M(8, 7)*q3) + q3 * (2 * M(1, 8)*q1 + M(4, 8)*q0 + M(7, 8)*q2 + M(8, 8)*q3) + 2 * M(9, 1)*q2*q3 + 2 * M(4, 1)*q0*q1 + 2 * M(5, 1)*q0*q2 + 2 * M(6, 1)*q0*q3 + 2 * M(7, 1)*q1*q2 + 2 * M(8, 1)*q1*q3;
	result(1, 2) = M(10, 7) + M(0, 7)*q0*q0 + M(1, 7)*q1*q1 + M(2, 7)*q2*q2 + M(3, 7)*q3*q3 + 2 * q1*(M(9, 1)*q3 + 2 * M(2, 1)*q2 + M(5, 1)*q0 + M(7, 1)*q1) + q0 * (M(9, 4)*q3 + 2 * M(2, 4)*q2 + M(5, 4)*q0 + M(7, 4)*q1) + q2 * (M(9, 7)*q3 + 2 * M(2, 7)*q2 + M(5, 7)*q0 + M(7, 7)*q1) + q3 * (M(9, 8)*q3 + 2 * M(2, 8)*q2 + M(5, 8)*q0 + M(7, 8)*q1) + M(9, 7)*q2*q3 + M(4, 7)*q0*q1 + M(5, 7)*q0*q2 + M(6, 7)*q0*q3 + M(7, 7)*q1*q2 + M(8, 7)*q1*q3;
	result(1, 3) = M(10, 8) + M(0, 8)*q0*q0 + M(1, 8)*q1*q1 + M(2, 8)*q2*q2 + M(3, 8)*q3*q3 + 2 * q1*(M(9, 1)*q2 + 2 * M(3, 1)*q3 + M(6, 1)*q0 + M(8, 1)*q1) + q0 * (M(9, 4)*q2 + 2 * M(3, 4)*q3 + M(6, 4)*q0 + M(8, 4)*q1) + q2 * (M(9, 7)*q2 + 2 * M(3, 7)*q3 + M(6, 7)*q0 + M(8, 7)*q1) + q3 * (M(9, 8)*q2 + 2 * M(3, 8)*q3 + M(6, 8)*q0 + M(8, 8)*q1) + M(9, 8)*q2*q3 + M(4, 8)*q0*q1 + M(5, 8)*q0*q2 + M(6, 8)*q0*q3 + M(7, 8)*q1*q2 + M(8, 8)*q1*q3;

	result(2, 0) = M(10, 5) + M(0, 5)*q0*q0 + M(1, 5)*q1*q1 + M(2, 5)*q2*q2 + M(3, 5)*q3*q3 + 2 * q2*(2 * M(0, 2)*q0 + M(4, 2)*q1 + M(5, 2)*q2 + M(6, 2)*q3) + q0 * (2 * M(0, 5)*q0 + M(4, 5)*q1 + M(5, 5)*q2 + M(6, 5)*q3) + q1 * (2 * M(0, 7)*q0 + M(4, 7)*q1 + M(5, 7)*q2 + M(6, 7)*q3) + q3 * (2 * M(0, 9)*q0 + M(4, 9)*q1 + M(5, 9)*q2 + M(6, 9)*q3) + M(9, 5)*q2*q3 + M(4, 5)*q0*q1 + M(5, 5)*q0*q2 + M(6, 5)*q0*q3 + M(7, 5)*q1*q2 + M(8, 5)*q1*q3;
	result(2, 1) = M(10, 7) + M(0, 7)*q0*q0 + M(1, 7)*q1*q1 + M(2, 7)*q2*q2 + M(3, 7)*q3*q3 + 2 * q2*(2 * M(1, 2)*q1 + M(4, 2)*q0 + M(7, 2)*q2 + M(8, 2)*q3) + q0 * (2 * M(1, 5)*q1 + M(4, 5)*q0 + M(7, 5)*q2 + M(8, 5)*q3) + q1 * (2 * M(1, 7)*q1 + M(4, 7)*q0 + M(7, 7)*q2 + M(8, 7)*q3) + q3 * (2 * M(1, 9)*q1 + M(4, 9)*q0 + M(7, 9)*q2 + M(8, 9)*q3) + M(9, 7)*q2*q3 + M(4, 7)*q0*q1 + M(5, 7)*q0*q2 + M(6, 7)*q0*q3 + M(7, 7)*q1*q2 + M(8, 7)*q1*q3;
	result(2, 2) = 2 * M(10, 2) + 2 * M(0, 2)*q0*q0 + 2 * M(1, 2)*q1*q1 + 2 * M(2, 2)*q2*q2 + 2 * M(3, 2)*q3*q3 + 2 * q2*(M(9, 2)*q3 + 2 * M(2, 2)*q2 + M(5, 2)*q0 + M(7, 2)*q1) + q0 * (M(9, 5)*q3 + 2 * M(2, 5)*q2 + M(5, 5)*q0 + M(7, 5)*q1) + q1 * (M(9, 7)*q3 + 2 * M(2, 7)*q2 + M(5, 7)*q0 + M(7, 7)*q1) + q3 * (M(9, 9)*q3 + 2 * M(2, 9)*q2 + M(5, 9)*q0 + M(7, 9)*q1) + 2 * M(9, 2)*q2*q3 + 2 * M(4, 2)*q0*q1 + 2 * M(5, 2)*q0*q2 + 2 * M(6, 2)*q0*q3 + 2 * M(7, 2)*q1*q2 + 2 * M(8, 2)*q1*q3;
	result(2, 3) = M(10, 9) + M(0, 9)*q0*q0 + M(1, 9)*q1*q1 + M(2, 9)*q2*q2 + M(3, 9)*q3*q3 + 2 * q2*(M(9, 2)*q2 + 2 * M(3, 2)*q3 + M(6, 2)*q0 + M(8, 2)*q1) + q0 * (M(9, 5)*q2 + 2 * M(3, 5)*q3 + M(6, 5)*q0 + M(8, 5)*q1) + q1 * (M(9, 7)*q2 + 2 * M(3, 7)*q3 + M(6, 7)*q0 + M(8, 7)*q1) + q3 * (M(9, 9)*q2 + 2 * M(3, 9)*q3 + M(6, 9)*q0 + M(8, 9)*q1) + M(9, 9)*q2*q3 + M(4, 9)*q0*q1 + M(5, 9)*q0*q2 + M(6, 9)*q0*q3 + M(7, 9)*q1*q2 + M(8, 9)*q1*q3;

	result(3, 0) = M(10, 6) + M(0, 6)*q0*q0 + M(1, 6)*q1*q1 + M(2, 6)*q2*q2 + M(3, 6)*q3*q3 + 2 * q3*(2 * M(0, 3)*q0 + M(4, 3)*q1 + M(5, 3)*q2 + M(6, 3)*q3) + q0 * (2 * M(0, 6)*q0 + M(4, 6)*q1 + M(5, 6)*q2 + M(6, 6)*q3) + q1 * (2 * M(0, 8)*q0 + M(4, 8)*q1 + M(5, 8)*q2 + M(6, 8)*q3) + q2 * (2 * M(0, 9)*q0 + M(4, 9)*q1 + M(5, 9)*q2 + M(6, 9)*q3) + M(9, 6)*q2*q3 + M(4, 6)*q0*q1 + M(5, 6)*q0*q2 + M(6, 6)*q0*q3 + M(7, 6)*q1*q2 + M(8, 6)*q1*q3;
	result(3, 1) = M(10, 8) + M(0, 8)*q0*q0 + M(1, 8)*q1*q1 + M(2, 8)*q2*q2 + M(3, 8)*q3*q3 + 2 * q3*(2 * M(1, 3)*q1 + M(4, 3)*q0 + M(7, 3)*q2 + M(8, 3)*q3) + q0 * (2 * M(1, 6)*q1 + M(4, 6)*q0 + M(7, 6)*q2 + M(8, 6)*q3) + q1 * (2 * M(1, 8)*q1 + M(4, 8)*q0 + M(7, 8)*q2 + M(8, 8)*q3) + q2 * (2 * M(1, 9)*q1 + M(4, 9)*q0 + M(7, 9)*q2 + M(8, 9)*q3) + M(9, 8)*q2*q3 + M(4, 8)*q0*q1 + M(5, 8)*q0*q2 + M(6, 8)*q0*q3 + M(7, 8)*q1*q2 + M(8, 8)*q1*q3;
	result(3, 2) = M(10, 9) + M(0, 9)*q0*q0 + M(1, 9)*q1*q1 + M(2, 9)*q2*q2 + M(3, 9)*q3*q3 + 2 * q3*(M(9, 3)*q3 + 2 * M(2, 3)*q2 + M(5, 3)*q0 + M(7, 3)*q1) + q0 * (M(9, 6)*q3 + 2 * M(2, 6)*q2 + M(5, 6)*q0 + M(7, 6)*q1) + q1 * (M(9, 8)*q3 + 2 * M(2, 8)*q2 + M(5, 8)*q0 + M(7, 8)*q1) + q2 * (M(9, 9)*q3 + 2 * M(2, 9)*q2 + M(5, 9)*q0 + M(7, 9)*q1) + M(9, 9)*q2*q3 + M(4, 9)*q0*q1 + M(5, 9)*q0*q2 + M(6, 9)*q0*q3 + M(7, 9)*q1*q2 + M(8, 9)*q1*q3;
	result(3, 3) = 2 * M(10, 3) + 2 * M(0, 3)*q0*q0 + 2 * M(1, 3)*q1*q1 + 2 * M(2, 3)*q2*q2 + 2 * M(3, 3)*q3*q3 + 2 * q3*(M(9, 3)*q2 + 2 * M(3, 3)*q3 + M(6, 3)*q0 + M(8, 3)*q1) + q0 * (M(9, 6)*q2 + 2 * M(3, 6)*q3 + M(6, 6)*q0 + M(8, 6)*q1) + q1 * (M(9, 8)*q2 + 2 * M(3, 8)*q3 + M(6, 8)*q0 + M(8, 8)*q1) + q2 * (M(9, 9)*q2 + 2 * M(3, 9)*q3 + M(6, 9)*q0 + M(8, 9)*q1) + 2 * M(9, 3)*q2*q3 + 2 * M(4, 3)*q0*q1 + 2 * M(5, 3)*q0*q2 + 2 * M(6, 3)*q0*q3 + 2 * M(7, 3)*q1*q2 + 2 * M(8, 3)*q1*q3;

	result(4, 0) = 2 * q0;
	result(4, 1) = 2 * q1;
	result(4, 2) = 2 * q2;
	result(4, 3) = 2 * q3;

	return result;
}

Eigen::MatrixXd getRfromq(Eigen::VectorXd& q) {

	double q1 = q[0];
    double q2 = q[1];
    double q3 = q[2];
    double q4 = q[3];

    Eigen::Matrix3d R;
    R << q1*q1 + q2*q2 - q3*q3 - q4*q4, 2*q2*q3 - 2*q1*q4, 2*q2*q4 + 2*q1*q3,
         2*q2*q3 + 2*q1*q4, q1*q1 - q2*q2 + q3*q3 - q4*q4, 2*q3*q4 - 2*q1*q2,
         2*q2*q4 - 2*q1*q3, 2*q3*q4 + 2*q1*q2, q1*q1 - q2*q2 - q3*q3 + q4*q4;
    
    return R;

}

